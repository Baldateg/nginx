---
# tasks file for nginx

- name: apt update_cache
  apt:
    update_cache: true

- name: nginx and certbot install
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - nginx
    - certbot
    - openssl

- name: not default nginx configurating
  when: not (nginx_default | default(true))
  block:
    - name: default config deleting
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/etc/nginx/sites-enabled/default"
        - "/etc/nginx/sites-available/default"

    - name: nginx http configs copying
      template:
        src: "{{ item.nginx_conf }}"
        dest: "/etc/nginx/sites-available/{{ item.nginx_name }}"
      loop: "{{ nginx_vhosts }}"
      vars: 
        nginx_http_conf: true
      when: item.nginx_conf is defined
      
    - name: html dirs creating
      file:
        path: "/var/www/{{ item.nginx_name }}"
        state: directory
        recurse: true
      loop: "{{ nginx_vhosts }}"
      when: item.nginx_name is defined
      
    - name: html confs copying
      copy:
        src: "{{ item.html_conf }}"
        dest: "/var/www/{{ item.nginx_name }}/home.html"
      loop: "{{ nginx_vhosts }}"
      when: 
        - item.nginx_name is defined
        - item.nginx_html_conf is defined
      
    - name: http activation
      file:
        src: "/etc/nginx/sites-available/{{ item.nginx_name }}"
        dest: "/etc/nginx/sites-enabled/{{ item.nginx_name }}"
        state: link
      register: activation_results
      loop: "{{ nginx_vhosts }}"
      when: 
        - item.nginx_name is defined
        - item.nginx_conf is defined
    
    - name: nginx_reload
      service:
        name: nginx
        state: reloaded
      when: activation_results.changed
      
    - name: SSL updating
      command: certbot renew --quiet
      notify: Nginx_reload
      loop: "{{ nginx_vhosts }}"
      when: (item.nginx_le_cert_renewal | default(false))
      
    - name: LE cert check and receiving
      block:
        - name: check if LE cert exists
          stat:
            path: "/etc/letsencrypt/live/{{ item.nginx_name }}/fullchain.pem"
          register: le_cert_exist
          loop: "{{ nginx_vhosts }}"
          loop_control:
            label: "{{ item.name }}"

        - name: recieve LE cert
          command: certbot certonly --webroot -w /var/www/{{ item.nginx_name }} -d {{ item.nginx_name }} -n --agree-tos --email test@test.ru
          when:
            - not le_cert_exist.results[item_index].stat.exists
            - item.cert_type == "LE"
          loop: "{{ nginx_vhosts }}"
          loop_control:
            index_var: item_index
            label: "{{ item.nginx_name }}"

      
    - name: CS cert check and recieving
      block:
        - name: check if CS cert exists
          stat:
            path: "/etc/ssl/certs/{{ item.nginx_name }}.crt"
          register: cs_cert_exist
          loop: "{{ nginx_vhosts }}"
          loop_control:
            label: "{{item.nginx_name}}"

        - name: Private key generating
          community.crypto.openssl_privatekey:
            path: "/etc/ssl/private/{{ item.nginx_name }}.key"
            size: 2048
            type: RSA
          when: 
            - not cs_cert_exist.results[item_index].stat.exists 
            - item.cert_type == "CS"
          loop: "{{ nginx_vhosts }}"
          loop_control:
            index_var: item_index
            label: "{{ item.nginx_name }}"
        
        - name: CSR generating
          community.crypto.openssl_csr:
            path: "/etc/ssl/{{ item.nginx_name }}.csr"
            privatekey_path: "/etc/ssl/private/{{ item.nginx_name }}.key"
            common_name: "{{ item.nginx_name }}"
          when: 
            - not cs_cert_exist.results[item_index].stat.exists 
            - item.cert_type == "CS"
          loop: "{{ nginx_vhosts }}"
          loop_control:
            index_var: item_index
            label: "{{ item.nginx_name }}"
          
        - name: CS generating
          community.crypto.openssl_certificate:
            path: "/etc/ssl/certs/{{ item.nginx_name }}.crt"
            privatekey_path: "/etc/ssl/private/{{ item.nginx_name }}.key"
            csr_path: "/etc/ssl/{{ item.nginx_name }}.csr"
            provider: selfsigned
            days: 365
          when: 
            - not cs_cert_exist.results[item_index].stat.exists 
            - item.cert_type == "CS"
          loop: "{{ nginx_vhosts }}"
          loop_control:
            index_var: item_index
            label: "{{ item.nginx_name }}"
          
    - name: nginx https configs copying
      template:
        src: "{{ item.nginx_conf }}"
        dest: "/etc/nginx/sites-available/{{ item.nginx_name }}"
      loop: "{{ nginx_vhosts }}"
      notify: Nginx_reload
      when: item.nginx_conf is defined
      
    - name: https activation
      file:
        src: "/etc/nginx/sites-available/{{ item.nginx_name }}"
        dest: "/etc/nginx/sites-enabled/{{ item.nginx_name }}"
        state: link
      loop: "{{ nginx_vhosts }}"
      notify: Nginx_reload
      when: item.nginx_conf is defined